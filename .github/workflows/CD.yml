name: Deploy to EC2 on Comment

on:
  issue_comment:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: >
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/renzzle deploy')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build and Test with Gradle
        env:
          DB_ADDRESS: ${{ secrets.DB_ADDRESS }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          GMAIL_ADDRESS: ${{ secrets.GMAIL_ADDRESS }}
          GMAIL_PASSWORD: ${{ secrets.GMAIL_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        run: ./gradlew build -x test --stacktrace

        # TODO : 빌드 시 테스트 되게 하기

      - name: Set up Docker environment
        run: |
          sudo apt-get update
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            sudo apt-get install -y docker.io
          else
            echo "Docker is already installed."
          fi

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t app .

      - name: Tag and Push Docker image
        run: |
          docker tag app renzzle/github-action:latest
          docker push renzzle/github-action:latest

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: renzzle.official
          key: ${{ secrets.PRIVATE_KEY }}
          source: './docker-compose.yml'
          target: '/home/renzzle.official/'
          port: 22
          timeout: 30s
          command_timeout: 10m
          debug: true
          overwrite: true

      - name: Copy Docker Compose prod file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: renzzle.official
          key: ${{ secrets.PRIVATE_KEY }}
          source: './docker-compose.prod.yml'
          target: '/home/renzzle.official/'
          port: 22
          timeout: 30s
          command_timeout: 10m
          debug: true
          overwrite: true

      - name: Create .env file and copy to EC2
        run: |
          echo "DB_ADDRESS=db:3306/${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }}" >> .env
          echo "GMAIL_ADDRESS=\"${{ secrets.GMAIL_ADDRESS }}\"" >> .env
          echo "JWT_SECRET_KEY=\"${{ secrets.JWT_SECRET_KEY }}\"" >> .env

      - name: Copy .env file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: renzzle.official
          key: ${{ secrets.PRIVATE_KEY }}
          source: './.env'
          target: '/home/renzzle.official/'

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: renzzle.official
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            cd /home/renzzle.official/

            ALL_CONTAINERS=$(docker ps -q)
            if [ -n "$ALL_CONTAINERS" ]; then
              docker stop $ALL_CONTAINERS
              docker rm $ALL_CONTAINERS
            fi
            
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml down
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # check container status
            echo "Running containers:"
            docker ps

      - name: Remove unused Docker images
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: renzzle.official
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            docker image prune -f
